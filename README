<div class="section" id="introduction">
<h1>INTRODUCTION</h1>
<p><strong>PyCK</strong> (Python Code Karigar); prounounced '<em>pick</em>' is/would be a web development framework
aiming to provide an easy to use yet powerful and flexible web framework for python developers.</p>
</div>
<div class="section" id="background">
<h1>BACKGROUND</h1>
<p>Of course, there are already a lot of great frameworks present for python like <a class="reference external" href="http://docs.pylonsproject.org/en/latest/docs/pylons.html">Pylons</a>, <a class="reference external" href="https://www.djangoproject.com/">Django</a>, <a class="reference external" href="http://docs.pylonsproject.org/en/latest/docs/pyramid.html">Pyramid</a>, <a class="reference external" href="http://bluebream.zope.org/">BlueBream (Previously Zope)</a>, <a class="reference external" href="http://turbogears.org/">TurboGears2</a> that provide really cool
features for developing web applications in python, I feel like there was still something missing for my taste. So you can say that this project is starting to satisfy a personal itch.</p>
<div class="section" id="why-create-pyck">
<h2>Why Create PyCK?</h2>
<p>Of all the frameworks mentioned above I liked some features of one framework and other features of another framework. Unfortunately I wasn't able to mix all those features I liked in any existing framework. For example Django probably is the most popular framework in python and for good reason, it has pluggable apps, extensible extensions like its admin panel, a lot of useful documentation and great community support. One of its biggest strengths is that a lot of apps are available for it which can be &quot;plugged&quot; into a new project to get things started really quickly. The problem is that django is very &quot;opnionated&quot;, the choices like ORM, templating language, URL dispatching mechanism are all made for the developer and you are mostly stuck with them unless you are willing to put in a lot of extra effort into it.</p>
<p>Consider the following scenario, my favorite ORM is <a class="reference external" href="http://www.sqlalchemy.org/">SQLAlchemy</a> and for good reason. I can develop command line applications, traditional GUIs in GUI toolkits like Qt, GTK etc all using SQLAlchemy as the ORM to interact with the database. Now if I decide to use django, I need to learn and use its ORM, why can't I use the one I already am familiar and proficient with? Though I can but that breaks a lot of stuff in Django.</p>
<p>Pylons and Pyramid on the other hand are very &quot;non-opinionated&quot; frameworks. They both are very flexible and I really like the way things are done in these frameworks. I can use SQLAlchemy or any other ORM like SQLObject etc if I like. I can choose the templating language I want to use (which BTW would be <a class="reference external" href="http://www.makotemplates.org/">Mako</a>). I can choose the URL handling mechanism (in Pyramid) be it URLDispatch or Traversal. But this flexiblity comes at a cost, building &quot;ready-made&quot; components for such frameworks isn't easily possible because we are not sure what the framework user will pick as technologies. So having pluggable apps or pre-built admin panels etc because tough.</p>
<p>So the solution? at least for me; I decided to build a framework based on Pyramid that makes the choices for the developers. If your choices are the same as mine, this framework would be ideal for you. Or if you are a new developer looking into python frameworks you can start here (just not right now since the work has only started yet).</p>
</div>
</div>
<div class="section" id="feature-plan">
<h1>FEATURE PLAN</h1>
<p>And what exactly are the choices?</p>
<ul class="simple">
<li>Use <strong>SQLAlchemy as the ORM</strong></li>
<li>Use <strong>Mako as the templating language</strong></li>
<li>Use <strong>URLDispatch as the resource location</strong> - URL to code mapping mechanism</li>
<li>Design should support <strong>Pluggable applications</strong> similar to Djano</li>
<li>Should have easily <strong>extendible components</strong> like an admin panel, etc</li>
<li>Allow web applications to be easily <strong>Themable</strong></li>
<li>Use <a class="reference external" href="http://dojotoolkit.org/">Dojo</a> for UI components, AJAX etc</li>
<li>Ability to easily specify <strong>separate view templates for mobile devices</strong> (using Dojox.mobile)</li>
<li><strong>Automatic form generation from database/SQLAlchemy models</strong> (looking into possible options like sprox, formalchemy, wtforms, deform, etc)</li>
</ul>
</div>
</div>